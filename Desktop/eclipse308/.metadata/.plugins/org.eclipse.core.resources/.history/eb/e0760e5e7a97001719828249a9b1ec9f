'''
@author: 
@date:

@note:

'''

import sys, random
from compsci260lib import *

def find_genes(sequence, min_length):
    
    start_codon=[i.start() for i in re.finditer("aug",sequence)]
    stop_codon=[i.start() for i in re.finditer("uag",sequence)]+[i.start() for i in re.finditer("uga",sequence)]+[i.start() for i in re.finditer("uaa",sequence)]
    stop_codon.sort()
    print start_codon
    print stop_codon
  
    list=[]
    
    for i in range(len(stop_codon)):
  
        previous_stop_codon=0
        this_stop_codon=stop_codon[i]
       
        if i!=0:
            potential=stop_codon[:i]
            for k in potential[::-1]: 
           
                
                if (k%3)==(this_stop_codon%3):
             
                    previous_stop_codon=k
                    
                    break
     
        
       
            
        for j in start_codon:
        
            if j>=previous_stop_codon and j<this_stop_codon and (j%3)==(this_stop_codon%3):
               
                if this_stop_codon-j+1>=min_length:
                    
                    #stop_position=this_stop_codon+3
                    #start_position=j+1
                    stop_position=this_stop_codon
                    start_position=j
                    dict={}
                    dict['frame']=j%3
                    dict['stop']=stop_position
                    dict['aalength']=(this_stop_codon-j+1)/3
                    dict['start']=start_position
                    dict['stopcodon']=sequence[this_stop_codon:this_stop_codon+3]
                    dict['nlength']=(stop_position-start_position+1)
                    list.append(dict)
                    
                    
                    
                break
    
    newlist = sorted(list, key=lambda k: k['frame'])    
    return newlist   
                    
          

def solve_orfs():
    """Your code goes here..."""
    
    #a)
    dict=get_fasta_dict("sars.fasta")
    sequence=dict["sars"]
    list=find_genes(sequence,40)
    print list
   
    








	
if __name__ == '__main__':
    solve_orfs()
