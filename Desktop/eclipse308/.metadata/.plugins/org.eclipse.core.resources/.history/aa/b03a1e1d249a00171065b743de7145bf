'''
@author: 
@date:

@note: 

'''

import sys
from compsci260lib import *

def find_genes(sequence, min_length_aa):
    
    sequence=sequence+sequence
    start_codon=[i.start() for i in re.finditer("atg",sequence)]
    stop_codon=[i.start() for i in re.finditer("[tu]a[ag]|[tu]ga",sequence)]
  
    stop_codon.sort()
    start_codon.sort()

    list=[]
    
    
    for i in range(len(stop_codon)):
  
        previous_stop_codon=0
        this_stop_codon=stop_codon[i]
       
        if i!=0:
            potential=stop_codon[:i]
            for k in potential[::-1]: 
                
                if (k%3)==(this_stop_codon%3):   
                    previous_stop_codon=k       
                    break
     
        
       
            
        for j in start_codon:
        
            if j>=previous_stop_codon and j<this_stop_codon and (j%3)==(this_stop_codon%3):
               
                if this_stop_codon-j+1>=min_length_aa*3 and j-len(sequence)/2<0:
                   
                    start_position=j+1
                    stop_position=this_stop_codon+3
                    # deal with circular
                    if stop_position>len(sequence)/2:
                        length=stop_position-start_position+1
                        stop_position=this_stop_codon+3-len(sequence)/2
                    else:
                        length=stop_position-start_position+1
                              
                    
                    
                    dict={}
                    dict['frame']=j%3
                    dict['stop']=stop_position
                    dict['aalength']=(this_stop_codon-j+1)/3
                    dict['start']=start_position
                    dict['stopcodon']=sequence[this_stop_codon:this_stop_codon+3]
                    dict['nlength']=length
                    list.append(dict)
                    
                    
                    
                break
    
    
    newlist = sorted(list, key=lambda k: k['start'])    
    return newlist


    
  
 



def solve_plasmid():
    """Your code goes here..."""
    
    #b)
    dict=get_fasta_dict("plasmid.fasta")
    
    # find the original total length of all reads
    sum=0
    for i in dict:
        sum=sum+len(dict[i])
    print "Original total length is: "+str(sum)
    
    #randomly set read4 as the first sequence
    sequence=dict['read1']  
    current='read1'
    del dict[current]
    while len(dict)>0:
        # use a loop to find the next sequence
        for i in dict:
            if current!=i and dict[i][:20]==sequence[-20:]:
                sequence=sequence+dict[i][20:]
                del dict[i]
                current=i
                break
    #the last sequence needs to cut off the tail as it coincides with the head of the first sequence (circular)
    sequence=sequence[:-20]         
    
    print "the assembly sequence is: "+str(sequence)
    print "Length of sequence is: "+str(len(sequence))
    
    #c)
    reverseStrand=""
    for i in sequence:
        if (i=="c"):
            reverseStrand=reverseStrand+"g";
        if (i=="g"):
            reverseStrand=reverseStrand+"c";
        if (i=="a"):
            reverseStrand=reverseStrand+"t";
        if (i=="t"):
            reverseStrand=reverseStrand+"a";
    reverseStrand=reverseStrand[::-1]

    total=find_genes(sequence, 40)
    reverse_total=find_genes(reverseStrand,40)
    print len(total)
    print len(reverse_total)
    for i in reverse_total:
        i['start']=len(sequence)-i['start']
        i['stop']=len(sequence)-i['stop']
        total.append(i)
    
    total = sorted(total, key=lambda k: k['frame'])    
    
    print "The details of all ORFs with a minimum length of 40 are shown below:"
    for i in total:
        print i
    print "The number of ORFs I find is: "+str(len(total))
    
    
    #c) Computer fraction of the genome that is coding
    
    array=[]
    for i in range(len(sequence)):
        array.append(0)
    
    
    for i in range(len(total)):
        
        start=total[i]["start"]
        stop=total[i]["stop"]
     
        if stop>start:
            for q in range(start-1,stop-3):
                array[q]=1
        else:
          
            for q in range(0,stop-3):
                array[q]=1
            for q in range(start-1,len(sequence)):
                array[q]=1
    count=0
    for p in range(len(array)):
        if array[p]==1:
            count+=1
    
            
    fraction=float(count)/len(sequence)
    print "The fraction of the genome that is coding is: "+str(fraction)
    
    #d)
    new_dict = sorted(total, key=lambda k: k['aalength']) 
    ORF_info=new_dict[-1]
    ORF_start=ORF_info['start']
    ORF_stop=ORF_info['stop']
    ORF=sequence[ORF_start-1:ORF_stop]
    
    
    #translate in to amino acid sequence
    print "Translation of the largest ORF is: "+str(translate(ORF))
    
    
    
        
        
   









if __name__ == '__main__':
    solve_plasmid()
