import javafx.animation.KeyFrame;
import javafx.geometry.Point2D;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.stage.Stage;
import javafx.util.Duration;
import java.util.Random;


/**
 * A basic example JavaFX program for the first lab.
 * 
 * @author Robert C. Duvall
 */
public class ExampleBounce extends Application {
    public static final String TITLE = "Example JavaFX";
    public static final String BALL_IMAGE = "ball.gif";
    public static final int SIZE = 400;
    public static final Paint BACKGROUND = Color.WHITE;
    public static final int FRAMES_PER_SECOND = 60;
    public static final int MILLISECOND_DELAY = 1000 / FRAMES_PER_SECOND;
    public static final double SECOND_DELAY = 1.0 / FRAMES_PER_SECOND;
    public static final int KEY_INPUT_SPEED = 5;
    public static final double GROWTH_RATE = 1.1;
    public static final int BOUNCER_MIN_SPEED = -60;
    public static final int BOUNCER_MAX_SPEED = 60;
    private static final int BOUNCER_MIN_SIZE = 10;
    private static final int BOUNCER_MAX_SIZE = 50;
   

    // some things we need to remember during our game
    private Scene myScene;
    private ImageView myBouncer1;
    private ImageView myBouncer2;
    private Rectangle myTopBlock;
    private Rectangle myBottomBlock;
    private Point2D myVelocity1;
    private Point2D myVelocity2;
    private Random dice=new Random();
    

    
    /**
     * Initialize what will be displayed and how it will be updated.
     */
    @Override
    public void start (Stage s) {
        // attach scene to the stage and display it
        Scene scene = setupGame(SIZE, SIZE, BACKGROUND);
        s.setScene(scene);
        s.setTitle(TITLE);
        s.show();
        // attach "game loop" to timeline to play it
        
        KeyFrame frame = new KeyFrame(Duration.millis(MILLISECOND_DELAY),
                                      e -> step(SECOND_DELAY));
        Timeline animation = new Timeline();
        animation.setCycleCount(Timeline.INDEFINITE);
        animation.getKeyFrames().add(frame);
        animation.play();
    }

    // Create the game's "scene": what shapes will be in the game and their starting properties
    private Scene setupGame (int width, int height, Paint background) {
        // create one top level collection to organize the things in the scene
        Group root = new Group();
        // create a place to see the shapes
        myScene = new Scene(root, width, height, background);
        // make some shapes and set their properties
        Image image = new Image(getClass().getClassLoader().getResourceAsStream(BALL_IMAGE));
        myBouncer1 = makeBouncer(image,width,height);
       
        
        //turn speed into velocity
        myVelocity1 = new Point2D(getRandomInRange(BOUNCER_MIN_SPEED, BOUNCER_MAX_SPEED),
                                  getRandomInRange(BOUNCER_MIN_SPEED, BOUNCER_MAX_SPEED));
        myBouncer2 = makeBouncer(image, width, height);
        // turn speed into velocity that can be updated on bounces
        myVelocity2 = new Point2D(getRandomInRange(BOUNCER_MIN_SPEED, BOUNCER_MAX_SPEED),
                                  getRandomInRange(BOUNCER_MIN_SPEED, BOUNCER_MAX_SPEED));

        
        myTopBlock = new Rectangle(width / 2 - 25, height / 2 - 100, 50, 50);
        myTopBlock.setFill(Color.RED);
        myBottomBlock = new Rectangle(width / 2 - 25, height / 2 + 50, 50, 50);
        myBottomBlock.setFill(Color.BISQUE);
        // order added to the group is the order in which they are drawn
        root.getChildren().add(myBouncer1);
        root.getChildren().add(myBouncer2);
        root.getChildren().add(myTopBlock);
        root.getChildren().add(myBottomBlock);
        // respond to input
        myScene.setOnKeyPressed(e -> handleKeyInput(e.getCode()));
        myScene.setOnMouseClicked(e -> handleMouseInput(e.getX(), e.getY()));
        return myScene;
    }

    // Change properties of shapes to animate them 
    // Note, there are more sophisticated ways to animate shapes, but these simple ways work fine to start.
    private void step (double elapsedTime) {
        // update attributes
        
        if (myBouncer1.getX() < 0 || myBouncer1.getX() > myScene.getWidth() - myBouncer1.getBoundsInLocal().getWidth()) {
            myVelocity1 = new Point2D(-myVelocity1.getX(), myVelocity1.getY());
        }
        if (myBouncer1.getY() < 0 || myBouncer1.getY() > myScene.getHeight() - myBouncer1.getBoundsInLocal().getHeight()) {
            myVelocity1 = new Point2D(myVelocity1.getX(), -myVelocity1.getY());
        }
        
        if (myBouncer2.getX() < 0 || myBouncer2.getX() > myScene.getWidth() - myBouncer2.getBoundsInLocal().getWidth()) {
            myVelocity2 = new Point2D(-myVelocity2.getX(), myVelocity2.getY());
        }
        if (myBouncer2.getY() < 0 || myBouncer2.getY() > myScene.getHeight() - myBouncer2.getBoundsInLocal().getHeight()) {
            myVelocity2 = new Point2D(myVelocity2.getX(), -myVelocity2.getY());
        }


        
       
      
        moveBouncer(myBouncer1, myVelocity1, elapsedTime);
        moveBouncer(myBouncer2, myVelocity2, elapsedTime);

        	
        
        
        myTopBlock.setRotate(myTopBlock.getRotate() - 1);
        myBottomBlock.setRotate(myBottomBlock.getRotate() + 1);

        // check for collisions
        // with shapes, can check precisely
        Shape intersect = Shape.intersect(myTopBlock, myBottomBlock);
        if (intersect.getBoundsInLocal().getWidth() != -1) {
            myTopBlock.setFill(Color.PLUM);
        }
        else {
            myTopBlock.setFill(Color.RED);
        }
        // with images can only check bounding box
        if (myBottomBlock.getBoundsInParent().intersects(myBouncer1.getBoundsInParent()) ||
        		myBottomBlock.getBoundsInParent().intersects(myBouncer2.getBoundsInParent())) {
            myBottomBlock.setFill(Color.BURLYWOOD);
        }
        else {
            myBottomBlock.setFill(Color.BISQUE);
        }
        
        
    }
    
    // Create a bouncer from a given image
    private ImageView makeBouncer (Image image, int screenWidth, int screenHeight) {
        ImageView result = new ImageView(image);
        // make sure it stays a circle
        int size = getRandomInRange(BOUNCER_MIN_SIZE, BOUNCER_MAX_SIZE);
        result.setFitWidth(size);
        result.setFitHeight(size);
        // make sure it stays within the bounds
        result.setX(getRandomInRange(size,  screenWidth - size));
        result.setY(getRandomInRange(size, screenHeight - size));
        return result;
    }

    // Move a bouncer based on its velocity
    private void moveBouncer (ImageView bouncer, Point2D velocity, double elapsedTime) {
        bouncer.setX(bouncer.getX() + velocity.getX() * elapsedTime);
        bouncer.setY(bouncer.getY() + velocity.getY() * elapsedTime);
    }


    // What to do each time a key is pressed
    private void handleKeyInput (KeyCode code) {
        if (code == KeyCode.RIGHT) {
            myTopBlock.setX(myTopBlock.getX() + KEY_INPUT_SPEED);
        }
        else if (code == KeyCode.LEFT) {
            myTopBlock.setX(myTopBlock.getX() - KEY_INPUT_SPEED);
        }
        else if (code == KeyCode.UP) {
            myTopBlock.setY(myTopBlock.getY() - KEY_INPUT_SPEED);
        }
        else if (code == KeyCode.DOWN) {
            myTopBlock.setY(myTopBlock.getY() + KEY_INPUT_SPEED);
        }
    }

    // What to do each time a key is pressed
    private void handleMouseInput (double x, double y) {
        if (myBottomBlock.contains(x, y)) {
            myBottomBlock.setScaleX(myBottomBlock.getScaleX() * GROWTH_RATE);
            myBottomBlock.setScaleY(myBottomBlock.getScaleY() * GROWTH_RATE);
        }
    }
    
    private int getRandomInRange (int min, int max) {
        return min + dice.nextInt(max - min) + 1;
    }

    /**
     * Start the program.
     */
    public static void main (String[] args) {
        launch(args);
    }
}
