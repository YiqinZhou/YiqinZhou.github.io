'''
@author: 
@date: 

@note: 

'''

import sys
import re

from compsci260lib import *

def find_restriction_sites(dictname,key,beginning,end,name,reversename):
    dict=get_fasta_dict(dictname)
    
    upstream=dict[key][0:beginning-1]
    downstream=dict[key][end:]
    
        #Reverse DNA strand starting with 3'
    reverseStrand=""
    for i in dict[key]:
        if (i=="c"):
            reverseStrand=reverseStrand+"g";
        if (i=="g"):
            reverseStrand=reverseStrand+"c";
        if (i=="a"):
            reverseStrand=reverseStrand+"t";
        if (i=="t"):
            reverseStrand=reverseStrand+"a";
            
    reverseUpstream= reverseStrand[:beginning-1]
    reverseDownstream=reverseStrand[end:] 
    
    
  
    location=([i.start()+1 for i in re.finditer(name,upstream)]+
          [i.start()+end+1 for i in re.finditer(name,downstream)]+
           [i.start()+1 for i in re.finditer(reversename,reverseUpstream)]+
           [i.start()+end+1 for i in re.finditer(reversename,reverseDownstream)])
    

    Sequence=([i for i in re.findall(name,upstream)]+
          [i for i in re.findall(name,downstream)]+
           [i for i in re.findall(reversename,reverseUpstream)]+
           [i for i in re.findall(reversename,reverseDownstream)])
    
    print "Locations are "+str(location)
    print "Actual sequences are "+str(Sequence)
    
def solve_cloning():
    """Your code goes here..."""
    
     #a) beginning, end and length of the Cdc24 gene
    beginning=1001
    end=3565
    
    length_of_gene=end-beginning+1
    print "Length of gene is "+str(length_of_gene)
    
    length_of_peptide_product= (end-beginning+1-3)/3
    print "Length of peptide product is "+str(length_of_peptide_product)
    
    #b)
    dict=get_fasta_dict("cdc24_plus_minus_1kb.fasta")
    
    upstream=dict['cdc24'][0:1000]
    downstream=dict['cdc24'][3565:]
    
        #Reverse DNA strand starting with 3'
    reverseStrand=""
    for i in dict['cdc24']:
        if (i=="c"):
            reverseStrand=reverseStrand+"g";
        if (i=="g"):
            reverseStrand=reverseStrand+"c";
        if (i=="a"):
            reverseStrand=reverseStrand+"t";
        if (i=="t"):
            reverseStrand=reverseStrand+"a";
            
    reverseUpstream= reverseStrand[:1000]
    reverseDownstream=reverseStrand[3565:] 
      
    
    #BamHI
    
    print "For BamHI: "
    find_restriction_sites("cdc24_plus_minus_1kb.fasta",'cdc24',beginning,end,"ggatcc","cctagg")
    
    
    #BstYI
      
    print "For BstYI: " 
    find_restriction_sites("cdc24_plus_minus_1kb.fasta",'cdc24',beginning,end,"[a,g]gatc[c,t]","[c,t]ctag[a,g]")
    
    
   
    
    #SpeI, only need to check one strand
    SpeI=([i.start() for i in re.finditer("actagt",upstream)]+
          [i.start()+3565 for i in re.finditer("actagt",downstream)])         
    print "Location for SpeI is "+str(SpeI)
    
    print "For SpeI: " 
    find_restriction_sites("cdc24_plus_minus_1kb.fasta",'cdc24',beginning,end,"actagt","tgatca")
    
    
    #SphI, only need to check one strand
    SphI=([i.start() for i in re.finditer("gcatgc",upstream)]+
          [i.start()+3565 for i in re.finditer("gcatgc",downstream)])
    print "Location for SphI is "+str(SphI)
    
    #styI, not palindromic, need to check both
    styI=([i.start() for i in re.finditer("cc[a,t][a,t]gg",upstream)]+
          [i.start()+3565 for i in re.finditer("cc[a,t][a,t]gg",downstream)]+
          [i.start() for i in re.finditer("gg[a,t][a,t]cc",reverseUpstream)]+
           [i.start()+3565 for i in re.finditer("gg[a,t][a,t]cc",reverseDownstream)])
    styISequence=([i for i in re.findall("cc[a,t][a,t]gg",upstream)]+
          [i for i in re.findall("cc[a,t][a,t]gg",downstream)]+
          [i for i in re.findall("gg[a,t][a,t]cc",reverseUpstream)]+
           [i for i in re.findall("gg[a,t][a,t]cc",reverseDownstream)])
    print "Location for StyI is "+str(styI)
    print "Actual Sequence for StyI are "+str(styISequence)
    
    #d) 
    
    
    
    
    
    




if __name__ == '__main__':
    solve_cloning()
    
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    